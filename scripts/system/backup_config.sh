#!/bin/sh

echo "=== Network Configuration Backup ==="
echo

BACKUP_DIR="${NETUTIL_WORKDIR:-$HOME}/netutil_backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/network_config_$TIMESTAMP.tar.gz"

echo "Creating backup directory: $BACKUP_DIR"
mkdir -p "$BACKUP_DIR"

TEMP_DIR=$(mktemp -d)
echo "Using temporary directory: $TEMP_DIR"

echo "Backing up network configuration..."

echo "1. Saving IP addresses..."
ip addr show > "$TEMP_DIR/ip_addresses.txt"

echo "2. Saving routing table..."
ip route show > "$TEMP_DIR/routes.txt"
ip route show table all > "$TEMP_DIR/routes_all.txt"

echo "3. Saving interface information..."
ip link show > "$TEMP_DIR/interfaces.txt"

echo "4. Saving VLAN interfaces..."
ip link show | grep "@" > "$TEMP_DIR/vlans.txt" || echo "No VLAN interfaces" > "$TEMP_DIR/vlans.txt"

echo "5. Saving DNS configuration..."
cp /etc/resolv.conf "$TEMP_DIR/resolv.conf" 2>/dev/null || echo "Could not backup resolv.conf"

echo "6. Saving network statistics..."
cat /proc/net/dev > "$TEMP_DIR/net_dev.txt"

echo "7. Saving ARP table..."
ip neigh show > "$TEMP_DIR/arp_table.txt"

echo "8. Saving network namespace info..."
ip netns list > "$TEMP_DIR/netns.txt" 2>/dev/null || echo "No network namespaces" > "$TEMP_DIR/netns.txt"

echo "9. Saving bridge information..."
bridge link show > "$TEMP_DIR/bridges.txt" 2>/dev/null || echo "No bridges" > "$TEMP_DIR/bridges.txt"

echo "10. Saving current working directory..."
echo "$(pwd)" > "$TEMP_DIR/workdir.txt"

echo "11. Generating executable restoration script..."
cat > "$TEMP_DIR/restore_network_config.sh" << 'EOF'
#!/bin/sh
# Automatic Network Configuration Restoration Script
# Generated by NetUtility backup system

echo "=== Network Configuration Restoration ==="
echo "WARNING: This will modify your network configuration!"
echo "Press Ctrl+C to cancel, or Enter to continue..."
read -r

echo "Starting network configuration restoration..."

# Restore IP addresses
echo "Restoring IP addresses..."
EOF

# Generate IP restoration commands
echo "# IP Address Restoration Commands" >> "$TEMP_DIR/restore_network_config.sh"
ip addr show | awk '
/^[0-9]+:/ {
    interface = $2
    gsub(/:/, "", interface)
    gsub(/@.*/, "", interface)
}
/inet / {
    if ($2 != "127.0.0.1/8" && interface != "lo") {
        print "ip addr add " $2 " dev " interface
    }
}' >> "$TEMP_DIR/restore_network_config.sh"

# Generate VLAN restoration commands
echo >> "$TEMP_DIR/restore_network_config.sh"
echo "# VLAN Interface Restoration Commands" >> "$TEMP_DIR/restore_network_config.sh"
echo "echo \"Restoring VLAN interfaces...\"" >> "$TEMP_DIR/restore_network_config.sh"
ip link show | grep "@" | while read -r line; do
    vlan_interface=$(echo "$line" | cut -d':' -f2 | tr -d ' ')
    parent_interface=$(echo "$line" | cut -d'@' -f2 | cut -d':' -f1)
    vlan_id=$(echo "$vlan_interface" | grep -o '\.[0-9]*$' | tr -d '.')
    if [ -n "$vlan_id" ]; then
        echo "ip link add link $parent_interface name $vlan_interface type vlan id $vlan_id" >> "$TEMP_DIR/restore_network_config.sh"
    fi
done

# Generate route restoration commands
echo >> "$TEMP_DIR/restore_network_config.sh"
echo "# Route Restoration Commands" >> "$TEMP_DIR/restore_network_config.sh"
echo "echo \"Restoring routes...\"" >> "$TEMP_DIR/restore_network_config.sh"
ip route show | grep -v "proto kernel" | while read -r route; do
    echo "ip route add $route" >> "$TEMP_DIR/restore_network_config.sh"
done

# Add final commands to restoration script
cat >> "$TEMP_DIR/restore_network_config.sh" << 'EOF'

# Restore DNS configuration
echo "Restoring DNS configuration..."
if [ -f "resolv.conf" ]; then
    cp resolv.conf /etc/resolv.conf
    echo "DNS configuration restored"
else
    echo "No DNS configuration backup found"
fi

# Bring interfaces up
echo "Bringing interfaces up..."
for interface in $(ip link show | grep "state DOWN" | cut -d':' -f2 | tr -d ' '); do
    if [ "$interface" != "lo" ]; then
        ip link set "$interface" up
    fi
done

echo "Network configuration restoration completed!"
echo "Please verify network connectivity and adjust as needed."
EOF

chmod +x "$TEMP_DIR/restore_network_config.sh"

echo "12. Creating metadata file..."
cat > "$TEMP_DIR/backup_info.txt" << EOF
Backup created: $(date)
Hostname: $(hostname)
Kernel: $(uname -r)
Distribution: $(cat /etc/os-release 2>/dev/null | head -1 || echo "Unknown")
Working directory: $(pwd)
Backup tool: NetUtility
EOF

echo "Creating compressed backup..."
cd "$TEMP_DIR" || exit 1
tar -czf "$BACKUP_FILE" ./*

echo "Cleaning up temporary files..."
rm -rf "$TEMP_DIR"

echo "Backup completed successfully!"
echo "Backup file: $BACKUP_FILE"
echo "Backup size: $(du -h "$BACKUP_FILE" | cut -f1)"

echo
echo "Backup contents:"
tar -tzf "$BACKUP_FILE" | head -20
echo

echo "To restore this backup, you have two options:"
echo "1. Use the restore_config.sh script (guided restoration)"
echo "2. Extract and run the included restore_network_config.sh script (automatic restoration)"
echo
echo "Backup file path: $BACKUP_FILE"
echo "Executable restoration script included: restore_network_config.sh"